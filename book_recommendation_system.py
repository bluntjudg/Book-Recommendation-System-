# -*- coding: utf-8 -*-
"""book recommendation system.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FxIK1EeB0J4BpOo24of5iseBpptQu3Av
"""

import pandas as pd
import numpy as np
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import linear_kernel
import plotly.express as px
import plotly.graph_objects as go

data = pd.read_csv("books_data.csv")
data.head()

data.columns

fig = px.histogram(data, x="average_rating", nbins=10,
                   title="Distribution of Average Ratings")
fig.update_xaxes(title_text='Average Rating')
fig.update_yaxes(title_text='Frequency')
fig.show()

top_authors = data['authors'].value_counts().head(20)
top_authors

fig = px.bar(top_authors)
fig.update_xaxes(title_text='Author')
fig.update_yaxes(title_text='Number of Books')

data.info()

#converting this data type into numeric dtype
data['average_rating'] = pd.to_numeric(data['average_rating'], errors='coerce')

#adding a new column of book_content
data['book_content'] = data['title'] +  ' ' + data['authors']
data.head()

tfidf_vectorizer = TfidfVectorizer(stop_words='english')
tfidf_matrix = tfidf_vectorizer.fit_transform(data['book_content'])

# Compute the cosine similarity between books
cosine_sim = linear_kernel(tfidf_matrix, tfidf_matrix)

def recommend_books(book_title, cosine_sim=cosine_sim):
    # Get the index of the book that matches the title
    idx = data[data['title'] == book_title].index[0]

    # Get the cosine similarity scores for all books with this book
    sim_scores = list(enumerate(cosine_sim[idx]))

    # Sort the books based on the similarity scores
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)

    # Get the top 10 most similar books (excluding the input book)
    sim_scores = sim_scores[1:11]

    # Get the book indices
    book_indices = [i[0] for i in sim_scores]

    # Return the top 10 recommended books
    return data['title'].iloc[book_indices]

"""here the cosine values of the input is matched with the title & compares the cosine similarities value and dissimilarities and gets the top 10 sets of the data which matches the input book

it sorts the books based on the similarities value

0 - 0' -> similiar to 100 %

0 - 90' -> similiar to 0 %
"""

book_title = 'Seven Plays'
recommend_books(book_title)

